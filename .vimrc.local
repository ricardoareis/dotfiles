" Basic properties {
" vim: set expandtab sw=4 ts=4 sts=4 et tw=78 ft=vim foldmarker={,} foldlevel=0 foldmethod=marker spell:

syntax on
filetype plugin indent on

set synmaxcol=5000                          " Don't try to highlight lines longer than 5000 characters"
set encoding=utf-8
let mapleader=","
set laststatus=2
set signcolumn=yes
set notimeout ttimeout ttimeoutlen=10       "Quckly time out on keycodes, but never timeout on mappings"
" set virtualedit=all                         " Allow the cursor to go in to 'invalid' places"
set switchbuf=useopen,usetab                "Attempt to edit currently open files instead of opening multiple buf"
set hidden                                  " hidden buffers
"}

" Color properties {
color gruvbox
colorscheme gruvbox
let g:gruvbox_termcolors=256
set background=dark
"}

" Complete properties {
set complete-=i   " disable scanning included files
set complete-=t   " disable searching tags
"}

" Spell properties {
set spelllang=en_us,pt
hi SpellBad cterm=underline ctermfg=white
"}

" Alerts and feedback properties{
set noerrorbells
set novisualbell
set t_vb=
"}

" Tabs/Spaces properties {
set shiftwidth=4      " use indents of 4 spaces
set expandtab         " tabs are spaces, not tabs
set tabstop=4         " an indentation every four columns
set softtabstop=4     " let backspace delete indent
"}

" Inconsistency: Fix {
" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$
"}

" Code folding properties - TODO {
set foldenable
set foldmethod=indent
"}

" Bindings properties {
" Go to tab by number
noremap <leader>t1 1gt
noremap <leader>t2 2gt
noremap <leader>t3 3gt
noremap <leader>t4 4gt
noremap <leader>t5 5gt
noremap <leader>t6 6gt
noremap <leader>t7 7gt
noremap <leader>t8 8gt
noremap <leader>t9 9gt
noremap <leader>t0 :tablast<cr>
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
nnoremap <leader>ls :ls<cr>:b<space>
"}

" Show Invisible Chars {
set listchars=eol:⏎,tab:␉·,trail:␠,nbsp:⎵
nmap <leader>l :set invlist<cr>
"}

" Highlight - Matching Noises { 
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
match ExtraWhitespace /\s\+$\| \+\ze\t/
match ExtraWhitespace /[^\t]\zs\t\+/
autocmd BufWinLeave * call clearmatches()
"}

" Conceal properties {
nnoremap coe :set <C-R>=&conceallevel ? 'conceallevel=0' : 'conceallevel=1'<CR><CR>
"}

" Dealing with a long lines properties {
set wrap
set textwidth=120
set colorcolumn=120
autocmd VimResized * | set columns=120
set showbreak=...
"}

" Plugin: YCM properties {
let g:ycm_use_clangd=0
let g:ycm_global_ycm_extra_conf='~/repos/dotfiles/.ycm_extra_conf.py'
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"}

" Plugin: Identlines properties (this plugin change conceal properties) {
let g:indentLine_enabled=0
let g:indentLine_setConceal=1
let g:indent_guides_enable_on_vim_startup=1
"}

" Plugin: Vimux Properties {
" Prompt for a command to run
map <Leader><Leader>c :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader><Leader>cl :VimuxRunLastCommand<CR>
"}

" Plugin: Airline properties {
let g:airline_theme='gruvbox'
let g:airline#extensions#keymap#enabled=1
let g:airline_extensions=['branch', 'bufferline', 'hunks', 'keymap', 'netrw', 'quickfix', 'ale', 'tagbar', 'term', 'undotree', 'whitespace', 'wordcount', 'ycm']
"}

" Plugin: FZF (performs like CtrlP) {
nnoremap <C-p> :Files<CR>
let g:fzf_layout={ 'window': 'bot'.float2nr(&lines * 0.4).'new'  }
"}

" Plugin: Golang properties {
" format with goimports instead of gofmt
let g:go_fmt_command="goimports"

" disable fmt on save
let g:go_fmt_autosave=1
"} 

" Plugin: GitGutter properties {
let g:gitgutter_enabled=1
let g:gitgutter_map_keys=0
let g:gitgutter_sign_allow_clobber=1
let g:gitgutter_highlight_lines=0
let g:gitgutter_highlight_linenrs=1
let g:gitgutter_sign_added='ad'
let g:gitgutter_sign_modified='md'
let g:gitgutter_sign_removed='rd'
let g:gitgutter_sign_removed_first_line='rf'
let g:gitgutter_sign_modified_removed='mr'
let g:gitgutter_max_signs=50
set updatetime=2000
set foldtext=gitgutter#fold#foldtext()
map ghs :GitGutterStageHunk<CR>
map ghu :GitGutterUndoHunk<CR>
map ghf :GitGutterFold<CR>
"}

" Plugin: EditorConfig properties {
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
"}

" Plugin: Vim-GO {
" Disable some vim-go properties to better cursorline performance
let g:go_highlight_space_tab_error=0
let g:go_highlight_array_whitespace_error=0
let g:go_highlight_trailing_whitespace_error=0
set re=1
set ttyfast " Improves screen redraw"
set lazyredraw " Avoid redrawing the screen mid-command."
"}

" Plugin: UndoTree properties {

nnoremap <leader>u :UndotreeToggle<cr>
"}

" Plugin: Workspace Properties {
nnoremap <leader>s :ToggleWorkspace<CR>
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_autosave_always = 0
let g:workspace_autosave_ignore = ['gitcommit', 'gitrebase', 'nerdtree']
let g:workspace_persist_undo_history = 0  " enabled = 1 (default), disabled = 0
"}

" Maps {
" Better split management, kept in sync with tmux' mappings
noremap <leader>h :sp<CR><C-w>j
noremap <leader>v :vsp<CR><C-w>l
"}

" Unmaps {
" STOP the help from being so... HELPFULL ;)
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>"
"}

" Loading others .vim {
" function to source in directory
for fpath in split(globpath('~/.vim/plugins.d/', '*.vim'), '\n')
    exe 'source' fpath
endfor
"}
